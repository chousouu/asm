IN ;a
IN ;b
IN ;c
pop rcx
pop rbx 
pop rax 

push 0
push rax

JE LINEAR_EQ:

CALL DISC: 

push 0
push rdx

JE DISC_ZERO:

push 0
push rdx

JA DISC_POSITIVE:

push 0
push rdx

JB DISC_NEG: 


HALT


DISC:
push rbx
push rbx
mul 
push 4
push rax
push rcx
mul
mul 
sub 
pop rdx
RET 

DISC_ZERO:
push -1
push rbx
mul 
push 2
push rax
mul
div
push 1
PRROOT
HALT

DISC_POSITIVE:
push -1
push rbx
mul
push rdx
SQRT
add
push 2
push rax 
mul
div 
push 1
PRROOT

push -1
push rbx
mul
push rdx
SQRT
sub
push 2
push rax 
mul
div 
push 2
PRROOT
HALT

DISC_NEG:; discrim < 0
push 0
push 0 ; x%d - if %d == 0 -> no roots
PRROOT
HALT

LINEAR_EQ:

push 0
push rbx
JE B_ZERO:

push 0 
push rcx
JE C_ZERO:

push -1
push rcx
mul
push rbx
div
push 1 ;%d
PRROOT
HALT

C_ZERO:
push 0
push 1
PRROOT
HALT

B_ZERO:
push 0
push rcx
JE B_C_ZERO:
push 0 
push 0 ; x%d
PRROOT
HALT
B_C_ZERO:
push 777
push 777
PRROOT
HALT